# -*- coding: utf-8 -*-
"""Financial Loan Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h3YEGILCyAENK3p-KQeBYIfj9sdkqx1f
"""

# import data dari device
from google.colab import files
files.upload()
import pandas as pd
data=pd.read_excel("financial_loan.xlsx")
data

"""**STRUKTUR DATA**"""

# jumlah baris & kolom
data.shape

# nama-nama kolom
data.columns

#informasi data
data.info()

# missing value
data.isnull().sum()

# menghapus missing value pada employee title
data.dropna(inplace=True)
data.isnull().sum()

# duplikasi data
data.duplicated().sum()

# statistik deskriptif
data[['annual_income','dti','installment','int_rate','loan_amount','total_acc','total_payment']].describe()

"""**TOTAL LOAN APPLICATION, TOTAL FUNDED AMOUNT, TOTAL AMOUNT RECEIVED, AND TOTAL ANNUAL INCOME**"""

# total loan application (setelah menghilangkan data yang tidak memiliki employee title)
print('Total loan application:', data['id'].count())

# total funded amount
print('Total funded amount:${:.2f}M'.format(data['loan_amount'].sum()/1000000))

# total amount received
print('Total amount received:${:.2f}M'.format(data['total_payment'].sum()/1000000))

# total annual income
print('Total annual income: ${:.2f}M'.format(data['annual_income'].sum()/1000000))

"""**AVERAGE DEBT TO INCOME, INTEREST RATE, AND INSTALLMENT**"""

# rata-rata dti
print('Rata-rata debt to income: {:.2f}%'.format(data['dti'].mean()*100))

# rata-rata interest rate
print('Rata-rata interest rate: {:.2f}%'.format(data['int_rate'].mean()*100))

# rata-rata installment
print('Rata-rata installment: {:.2f}'.format(data['installment'].mean()))

"""**GOOD LOAN AND BAD LOAN**"""

data['loan_status'].value_counts()

# chart loan status by total loan application (pie chart & bar chart)
import matplotlib.pyplot as plt
loan_status=data.groupby('loan_status')['id'].count()*100/data['id'].count()
loan_status1=data.groupby('loan_status')['id'].count()
norm=plt.Normalize(min(loan_status),max(loan_status))
fig,axes=plt.subplots(1,2,figsize=(20,7))

# pie chart
axes[0].pie(loan_status,labels=None,autopct='%1.2f%%',colors=plt.cm.Purples(norm(loan_status)))
axes[0].legend(loan_status.index,loc='lower right',bbox_to_anchor=(1, 0))
axes[0].set_title('Loan Status')

# bar chart
loan_status1.plot(kind='bar',ax=axes[1],color=plt.cm.Reds(norm(loan_status)))
axes[1].set_title('Total Loan Application')
axes[1].set_xlabel('Loan Status')
#label
for i, value in enumerate(loan_status1):
  axes[1].text(i, value, str(value), ha='center',va='bottom')
plt.show()

# good loan
good_loan=data[data['loan_status'].isin(['Fully Paid','Current'])]
print('Total good loan funded amount: ${:.2f}M'.format(good_loan['loan_amount'].sum()/1000000))
print('Total good loan received amount: ${:.2f}M'.format(good_loan['total_payment'].sum()/1000000))
print('Total good loan application:',good_loan['id'].count())
print('Persentase good loan application: {:.2f}%'.format((good_loan['id'].count()/data['id'].count())*100))

bad_loan=data[data['loan_status']=='Charged Off']
print('Total bad loan funded amount: ${:.2f}M'.format(bad_loan['loan_amount'].sum()/1000000))
print('Total bad loan received amount: ${:.2f}M'.format(bad_loan['total_payment'].sum()/1000000))
print('Total bad loan application:',bad_loan['id'].count())
print('Persentase bad loan application: {:.2f}%'.format((bad_loan['id'].count()/data['id'].count())*100))

"""**HOME OWNERSHIP**"""

data['home_ownership'].value_counts()

# chart home ownership by total loan application (pie chart & bar chart)
import matplotlib.pyplot as plt
home_own=data.groupby('home_ownership')['id'].count()*100/data['id'].count()
home_own1=data.groupby('home_ownership')['id'].count()
norm=plt.Normalize(min(home_own),max(home_own))
fix,axes=plt.subplots(1,2,figsize=(20,7))

#  bar chart
home_own1.plot(kind='bar', ax=axes[0],color=plt.cm.Greens(norm(home_own)), title='Total Home Ownership')
axes[0].set_xlabel('Home Ownership')
#label
for i, value in enumerate(home_own1):
  axes[0].text(i,value,str(value),ha='center',va='bottom')

# pie chart
home_own.plot(kind='pie',ax=axes[1],autopct='%1.2f%%',labels=None,colors=plt.cm.Greens(norm(home_own)),title='Home Ownership Status',pctdistance=1.05)
axes[1].legend(home_own.index,bbox_to_anchor=(1, 0.5),loc='lower left')
axes[1].set_ylabel('')

plt.show

# home ownership by annual income
home_own_summary=data.groupby('home_ownership')[['loan_amount','total_payment']].sum().reset_index()
home_own_summary=home_own_summary.rename(columns={'home_ownership':'Home Ownership','loan_amount':'Total Funded Amount','total_payment':'Total Received Amount'})
print(home_own_summary)

"""**LOAN TERM**"""

# loan term by loan application
data['term'].value_counts()

# loan term by total funded amount and total received amount
loan_term=data.groupby('term')['loan_amount'].sum()/1000000
loan_term1=data.groupby('term')['total_payment'].sum()/1000000

fig,axes=plt.subplots(1,2,figsize=(20,7))

#pie chart 1
loan_term.plot(kind='pie',ax=axes[0], labels=loan_term.index,autopct=lambda p: f"{p:.2f}%\n${p*sum(loan_term)/100:.2f}M",title='Term by Total Funded Amount', wedgeprops=dict(width=0.55))
axes[0].set_ylabel('')


# pie chart 2
loan_term1.plot(kind='pie',ax=axes[1], labels=loan_term1.index,autopct=lambda p: f"{p:.2f}%\n${p*sum(loan_term1)/100:.2f}M",title='Term by Total Received Amount',wedgeprops=dict(width=0.55))
axes[1].set_ylabel('')


plt.show()

"""**LOAN PURPOSE**"""

# loan purpose by by loan application
data['purpose'].value_counts()

# loan purpose by total funded amount and total received amount
loan_purpose=data.groupby('purpose')['loan_amount'].sum().sort_values(ascending=True)/1000000
loan_purpose1=data.groupby('purpose')['total_payment'].sum().sort_values(ascending=True)/1000000

fig,axes=plt.subplots(2,1,figsize=(7,17))

# bar chart 1
loan_purpose.plot(kind='barh',ax=axes[0],title='Loan Purpose by Total Funded Amount',color='red')
#label
for i, value in enumerate(loan_purpose):
  axes[0].text(value,i,f"${value:.2f}M",ha='left',va='center')
axes[0].grid(axis='x',linestyle='--')
axes[0].set_xlabel('Funded Amount (M)')
axes[0].set_ylabel('')

# bar chart 2
loan_purpose1.plot(kind='barh',ax=axes[1],title='Loan Purpose by Total Received Amount',color='green')
#label
for i, value in enumerate(loan_purpose1):
  axes[1].text(value,i,f"${value:.2f}M",ha='left',va='center')
axes[1].grid(axis='x',linestyle='--')
axes[1].set_xlabel('Received Amount (M)')
axes[1].set_ylabel('')

plt.show()

"""**EMPLOYEE LENGTH**"""

# employee length by loan application
data['emp_length'].value_counts()

# employee length by total funded amount and total received amount
emp_length=data.groupby('emp_length')['loan_amount'].sum().sort_values(ascending=True)/1000000
emp_length1=data.groupby('emp_length')['total_payment'].sum().sort_values(ascending=True)/1000000

fig,axes=plt.subplots(2,1,figsize=(7,17))

# bar chart 1
emp_length.plot(kind='barh',ax=axes[0],title='Employee Lenght by Total Funded Amount',color='red')
#label
for i, value in enumerate(emp_length):
  axes[0].text(value,i,f"${value:.2f}M",ha='left',va='center')
axes[0].grid(axis='x',linestyle='--')
axes[0].set_xlabel('Funded Amount (M)')
axes[0].set_ylabel('')

# bar chart 2
emp_length1.plot(kind='barh',ax=axes[1],title='Employee Length by Total Received Amount',color='green')
#label
for i, value in enumerate(emp_length1):
  axes[1].text(value,i,f"${value:.2f}M",ha='left',va='center')
axes[1].grid(axis='x',linestyle='--')
axes[1].set_xlabel('Received Amount (M)')
axes[1].set_ylabel('')

plt.show()

"""**MONTH TREND BY ISSUE DATE**"""

# total funded amount
mt_funded=data.sort_values('issue_date').assign(month_name=lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort=False)['loan_amount'].sum().div(1000000).reset_index(name='loan_amount')

plt.figure(figsize=(10,5))
mt_funded.plot(x='month_name',y='loan_amount',kind='line',title='Total Funded Amount by Month (M)',linewidth=2,color='darkblue',marker='o')
#label
for i, value in enumerate(mt_funded['loan_amount']):
  plt.text(i,value+0.6,f"{value:.2f}",ha='center',va='bottom')

plt.xlabel('Month')
plt.ylabel('Funded Amount')
plt.xticks(rotation=90, ticks=range(len(mt_funded)),labels=mt_funded['month_name'])
plt.grid(linestyle='--',axis='both')
plt.legend().remove()
plt.show()

# total received amount
mt_received=data.sort_values('issue_date').assign(month_name=lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort=False)['total_payment'].sum().div(1000000).reset_index(name='total_payment')

plt.figure(figsize=(10,5))
mt_received.plot(x='month_name',y='total_payment',kind='line',title='Total Received Amount by Month (M)',linewidth=2,color='green',marker='o')
#label
for i, value in enumerate(mt_received['total_payment']):
  plt.text(i,value+0.6,f"{value:.2f}",ha='center',va='bottom')

plt.xlabel('Month')
plt.ylabel('Received Amount')
plt.xticks(rotation=90, ticks=range(len(mt_received)),labels=mt_received['month_name'])
plt.grid(linestyle='--',axis='both')
plt.legend().remove()
plt.show()

# total loan application
mt_appl=data.sort_values('issue_date').assign(month_name=lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort=False)['id'].count().reset_index(name='id_count')

plt.figure(figsize=(10,5))
mt_appl.plot(x='month_name',y='id_count',kind='line',title='Total Loan Application by Month',linewidth=2,color='purple',marker='o')
#label
for i, value in enumerate(mt_appl['id_count']):
  plt.text(i,value+0.6,str(value),ha='center',va='bottom')

plt.xlabel('Month')
plt.ylabel('Total Application')
plt.xticks(rotation=90, ticks=range(len(mt_appl)),labels=mt_appl['month_name'])
plt.grid(linestyle='--',axis='both')
# plt.tight_layout()
plt.legend().remove()
plt.show()